# -*- coding: utf-8 -*-
"""hospital_command_center_streamlit_app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DgTeHh3h1upbWeaVaCXdeI_SqPwsLW2t
"""

import streamlit as st
import random
import time
from datetime import datetime
import pandas as pd

# --- STATIC DATA CONFIGURATION ---
# This data is identical to the previous script.
WARDS = [
    {'name': 'Intensive Care Unit (ICU)', 'capacity': 12},
    {'name': 'Cardiology', 'capacity': 30},
    {'name': 'Orthopedics', 'capacity': 25},
    {'name': 'Neurology', 'capacity': 20},
    {'name': 'General Medicine', 'capacity': 40},
]
SURGEONS = ['Dr. Chen', 'Dr. Rodriguez', 'Dr. Patel', 'Dr. Williams']
PROCEDURES = ['Appendectomy', 'Knee Replacement', 'Coronary Bypass', 'Craniotomy', 'Hernia Repair']
PATIENT_NAMES = ['Smith, J', 'Garcia, M', 'Miller, A', 'Davis, R', 'Jones, L', 'Brown, C', 'Wilson, E']

# --- DATA GENERATION FUNCTIONS ---
# These functions create the initial state of the hospital.

def generate_initial_patients():
    """Generates a list of patient dictionaries for the Emergency Department."""
    patients = []
    for i in range(15):
        patients.append({
            'id': f'P{100 + i}',
            'name': random.choice(PATIENT_NAMES),
            'acuity': random.randint(1, 5),
            'waitTime': random.randint(0, 120),
            'status': random.choice(['Waiting', 'With Doctor', 'Imaging']),
        })
    return patients

def generate_initial_surgeries():
    """Generates a list of surgery dictionaries for the Operating Rooms."""
    surgeries = []
    for i in range(5):
        surgeries.append({
            'id': f'S{200 + i}',
            'patientName': random.choice(PATIENT_NAMES),
            'procedure': PROCEDURES[i % len(PROCEDURES)],
            'surgeon': SURGEONS[i % len(SURGEONS)],
            'time': f'{8 + i}:00 AM',
            'status': 'In Progress' if i == 0 else 'Scheduled' if i == 1 else 'Pre-Op',
        })
    return surgeries

def generate_initial_wards():
    """Generates a list of ward dictionaries with initial occupancy."""
    wards_status = []
    for ward in WARDS:
        current_occupancy = int(ward['capacity'] * random.uniform(0.6, 0.95))
        wards_status.append({**ward, 'current': current_occupancy})
    return wards_status

# --- HOSPITAL SIMULATION CLASS ---
# The logic inside this class remains unchanged.

class HospitalSimulation:
    """Manages the state and logic of the hospital simulation."""
    def __init__(self):
        self.patients = generate_initial_patients()
        self.surgeries = generate_initial_surgeries()
        self.wards = generate_initial_wards()
        self.forecast = {'admissions': random.randint(10, 15), 'confidence': 92}
        self.staffing = {'rns': {'current': 45, 'needed': 48}, 'mds': {'current': 15, 'needed': 15}}

    def run_simulation_step(self):
        """Runs a single time-step of the simulation, updating all components."""
        patient_admitted_this_step = False
        for patient in self.patients[:]:
            patient['waitTime'] += 1
            if patient['status'] == 'Waiting' and random.random() < 0.05:
                patient['status'] = 'With Doctor'
            if not patient_admitted_this_step and patient['acuity'] <= 2 and patient['waitTime'] > 60 and random.random() < 0.1:
                available_ward = next((w for w in self.wards if w['current'] < w['capacity']), None)
                if available_ward:
                    available_ward['current'] += 1
                    self.patients.remove(patient)
                    patient_admitted_this_step = True
        if random.random() < 0.15:
            self.patients.append({'id': f'P{random.randint(200, 999)}', 'name': random.choice(PATIENT_NAMES), 'acuity': random.randint(1, 5), 'waitTime': 0, 'status': 'Waiting'})
        if random.random() < 0.15:
            eligible_wards = [w for w in self.wards if w['current'] > 0]
            if eligible_wards:
                ward_to_discharge = random.choice(eligible_wards)
                ward_to_discharge['current'] -= 1
        for surgery in self.surgeries:
            if surgery['status'] == 'In Progress' and random.random() < 0.1: surgery['status'] = 'Post-Op'
            elif surgery['status'] == 'Scheduled' and random.random() < 0.05: surgery['status'] = 'In Progress'
            elif surgery['status'] == 'Pre-Op' and random.random() < 0.08: surgery['status'] = 'Scheduled'

# --- STREAMLIT UI LAYOUT ---

def display_dashboard(simulation):
    """Renders the hospital dashboard using Streamlit components."""

    # --- Header ---
    st.title("üè• Hospital Operations Command Center")
    st.text(f"Last Updated: {datetime.now().strftime('%A, %B %d, %Y | %I:%M:%S %p')}")

    # --- Calculate Key Metrics ---
    total_patients_in_wards = sum(w['current'] for w in simulation.wards)
    total_patients = total_patients_in_wards + len(simulation.patients)
    total_capacity = sum(w['capacity'] for w in simulation.wards)
    occupancy_percent = (total_patients_in_wards / total_capacity) * 100 if total_capacity > 0 else 0
    avg_wait_time = (sum(p['waitTime'] for p in simulation.patients) / len(simulation.patients)) if simulation.patients else 0
    ors_in_use = sum(1 for s in simulation.surgeries if s['status'] == 'In Progress')

    # --- Overview Metrics ---
    col1, col2, col3, col4 = st.columns(4)
    col1.metric("Total Patients", f"{total_patients}")
    col2.metric("Bed Occupancy", f"{occupancy_percent:.1f}%")
    col3.metric("Avg. ED Wait", f"{avg_wait_time:.0f} min")
    col4.metric("ORs in Use", f"{ors_in_use}")

    st.markdown("---")

    # --- Detailed Panels ---
    col1, col2 = st.columns(2)

    with col1:
        # Emergency Department
        st.subheader("üìã Emergency Department Live Status")
        # Convert list of dicts to a Pandas DataFrame for better display
        df_patients = pd.DataFrame(simulation.patients, columns=['name', 'acuity', 'waitTime', 'status'])
        df_patients = df_patients.sort_values(by='acuity').reset_index(drop=True)
        st.dataframe(df_patients, use_container_width=True)

        # AI Forecasts
        st.subheader("üìà AI-Powered Forecasts")
        st.info(f"**Next 4 Hours Admissions:** {simulation.forecast['admissions']} Patients ({simulation.forecast['confidence']}% Confidence)")
        staffing = simulation.staffing
        delta_rns = staffing['rns']['needed'] - staffing['rns']['current']
        st.text(f"Recommended RNs: {staffing['rns']['needed']} (Current: {staffing['rns']['current']})")
        if delta_rns > 0:
            st.warning(f"üî∫ Shortfall of {delta_rns} RNs recommended for next shift.")

    with col2:
        # Ward Occupancy
        st.subheader("üè® Inpatient Ward Occupancy")
        for ward in simulation.wards:
            percentage = (ward['current'] / ward['capacity']) * 100
            st.text(f"{ward['name']} ({ward['current']}/{ward['capacity']})")
            st.progress(int(percentage))

# --- MAIN EXECUTION BLOCK ---
if __name__ == "__main__":
    # Set page configuration for a wider layout
    st.set_page_config(layout="wide")

    # Initialize the simulation state using Streamlit's session_state
    # This ensures the simulation object persists across reruns
    if 'hospital_sim' not in st.session_state:
        st.session_state.hospital_sim = HospitalSimulation()

    # Create a placeholder to render the dashboard into
    dashboard_placeholder = st.empty()

    # Main loop to run simulation and update the dashboard
    while True:
        # Get the current simulation state
        hospital_sim = st.session_state.hospital_sim

        # Run one step of the simulation
        hospital_sim.run_simulation_step()

        # Update the dashboard within the placeholder
        with dashboard_placeholder.container():
            display_dashboard(hospital_sim)

        # Wait for 2 seconds before the next update
        time.sleep(2)